{"version":3,"sources":["components/form/Switch.tsx","components/form/FormInput.tsx","components/form/InfoCircle.tsx","components/PaymentForm.tsx","components/InfoBlock.tsx","App.js","reducer.tsx","index.tsx"],"names":["Switch","input","style","paddingLeft","className","paddingRight","htmlFor","type","id","FormInput","props","console","log","value","name","other","InfoCircle","useState","clicked","setState","infoCircleState","Fragment","onClick","data-tooltip","reduxForm","form","initialValues","paymentType","isTaxed","payroll","salary","salaryByType","mounted","useRef","useEffect","current","change","Field","component","InfoBlock","tax","sum","initialPay","curentTax","taxed","calculatedTax","Number","toFixed","employeePayment","totalSum","getPayroll","mapTypeToSalary","connect","state","control","undefined","values","initialStore","store","middlewareEnhancer","compose","applyMiddleware","logger","roodReducer","combineReducers","formReducer","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da97ee2f.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\ninterface Props {\r\n  input: string;\r\n}\r\n\r\nconst Switch: React.FC<Props> = ({ input }): JSX.Element => {\r\n  return (\r\n    <div style={{paddingLeft: 0}} className='custom-control custom-switch'>\r\n      <label\r\n        className='controll-label'\r\n        style={{paddingRight: '42px'}}\r\n        htmlFor='customSwitch1'\r\n      >\r\n        Указать с НДФЛ\r\n      </label>\r\n      <input\r\n        {...input}\r\n        type='checkbox'\r\n        className='custom-control-input'\r\n        id='customSwitch1'\r\n      />\r\n      <label\r\n        className='custom-control-label controll-label'\r\n        htmlFor='customSwitch1'\r\n      >\r\n        Без НДФЛ\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Switch;\r\n","import * as React from 'react';\r\n\r\ninterface Props {\r\n  input: Object;\r\n  meta: Object;\r\n  type: string;\r\n}\r\n\r\nconst FormInput: React.FC<Props> = (props): JSX.Element => {\r\n  console.log(props);\r\n  const { type, value, name, ...other}: Record<string, any> = props.input;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <input\r\n        className='form-container-payment__input'\r\n        type={type}\r\n        value={value}\r\n        name={name}\r\n        {...other} />\r\n      <label>₽</label>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default FormInput;\r\n","import React, { useState } from 'react';\r\n\r\nconst info: string = `МРОТ- минимальный размер оплаты труда. Разный для разных регионов`;\r\n\r\nconst InfoCircle: React.FC = (): JSX.Element => {\r\n  const [clicked, setState] = useState(false);\r\n  const infoCircleState: JSX.Element = clicked ? (\r\n    <React.Fragment>\r\n        <div className='circle__before-cross'></div>\r\n        <div className='circle__after-cross'></div>\r\n    </React.Fragment>\r\n  ) : <div className='circle__before-info'>i</div>;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        onClick={() => setState(!clicked)}\r\n        data-tooltip={info}\r\n        className={`circle ${clicked ? 'visible-tooltip' : ''}`}\r\n      >\r\n        {infoCircleState}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default InfoCircle;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nimport Switch from './form/Switch';\r\nimport FormInput from './form/FormInput';\r\nimport InfoCircle from './form/InfoCircle';\r\n\r\ninterface Props {\r\n  salaryByType: number;\r\n  change: Function;\r\n}\r\n\r\nconst PaymentForm: React.FC<Props> = (props): JSX.Element => {\r\n  const salary: number = props.salaryByType;\r\n  const mounted: any = useRef();\r\n\r\n  useEffect((): void => {\r\n    if (!mounted.current) {\r\n      mounted.current = true;\r\n    } else {\r\n      if(salary) {\r\n        props.change('payroll', salary);\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <label className='form-container__label form-container__label_gray'>Сумма</label>\r\n      <form>\r\n        <div className='form-container__radio'>\r\n          <label className='form-container__label'>\r\n            <Field\r\n              name='paymentType'\r\n              component='input'\r\n              type='radio'\r\n              value='perMonth'\r\n            />{' '}\r\n            Оклад за месяц\r\n          </label>\r\n          <div>\r\n            <label>\r\n              <Field\r\n                name='paymentType'\r\n                component='input'\r\n                type='radio'\r\n                value='defaultPay'\r\n             />{' '}\r\n              МРОТ\r\n            </label>\r\n            <InfoCircle />\r\n          </div>\r\n          <label className='form-container__label'>\r\n            <Field\r\n              name='paymentType'\r\n              component='input'\r\n              type='radio'\r\n              value='perDay'\r\n            />{' '}\r\n            Оплата за день\r\n          </label> \r\n          <label className='form-container__label'>\r\n            <Field\r\n              name='paymentType'\r\n              component='input'\r\n              type='radio'\r\n              value='perHour'\r\n            />{' '}\r\n            Оплата за час\r\n          </label>\r\n        </div>\r\n        <div className={`form-container-payment ${!salary ? 'hidden' : ''}`}>\r\n          <Field\r\n            name='isTaxed'\r\n            id='tax'\r\n            component={Switch}\r\n            type='checkbox'\r\n          />{' '}\r\n          <Field\r\n            name='payroll'\r\n            component={FormInput}\r\n            type='text'\r\n          />\r\n        </div>\r\n      </form>\r\n    </React.Fragment> \r\n  );\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'control',\r\n  initialValues: {\r\n    paymentType: 'perMonth',\r\n    isTaxed: true,\r\n    payroll: '50000',\r\n  },\r\n})(PaymentForm as any);\r\n","import * as React from 'react';\r\n\r\ninterface Props {\r\n  tax: number;\r\n  sum: string;\r\n  isTaxed: boolean;\r\n}\r\n\r\nconst InfoBlock: React.FC<Props> = (props): JSX.Element => {\r\n  const { tax, sum, isTaxed } = props;\r\n  const getPayroll = (initialPay: number, curentTax: number, taxed: boolean): Object => {\r\n    const calculatedTax: number = +(Number(initialPay) * Number(curentTax) / 100).toFixed();\r\n    const payroll = {\r\n      employeePayment: initialPay - calculatedTax,\r\n      tax: calculatedTax,\r\n      totalSum: initialPay,\r\n    }\r\n\r\n    if (taxed) {\r\n      payroll.employeePayment = initialPay;\r\n      payroll.totalSum = initialPay + calculatedTax;\r\n    }\r\n\r\n    return payroll;\r\n  };\r\n  const payroll: Record<string, any> = getPayroll(Number(sum), tax, isTaxed);\r\n\r\n  return (\r\n    <div className='info-container'>\r\n      <p><b>{`${payroll.employeePayment} ₽`}</b> сотрудник будет получать на руки</p>\r\n      <p><b>{`${payroll.tax} ₽`}</b> НДФЛ, 13% от оклада</p>\r\n      <p><b>{`${payroll.totalSum} ₽`}</b> за сотрудника в месяц</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InfoBlock;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport PaymentForm from './components/PaymentForm.tsx';\r\nimport InfoBlock from './components/InfoBlock.tsx';\r\n\r\nconst mapTypeToSalary = {\r\n  'perMonth': 40000,\r\n  'perHour': 400,\r\n  'perDay': 1500,\r\n  'defaultPay': false,\r\n};\r\n\r\nconst App = (props) => {\r\n  const paymentType = props.form.control === undefined ? null : props.form.control.values.paymentType;\r\n  const salary = paymentType && mapTypeToSalary[paymentType];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className='form-container'>\r\n        <PaymentForm salaryByType={salary} />\r\n      </div>\r\n      {paymentType === 'perMonth' ?\r\n        <InfoBlock\r\n          tax={props.tax}\r\n          sum={props.form.control.values.payroll}\r\n          isTaxed={props.form.control.values.isTaxed}\r\n        />\r\n        : ''}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const {\r\n    form\r\n  } = state;\r\n  const {\r\n    tax,\r\n  } = state.control;\r\n\r\n  return {\r\n    form,\r\n    tax,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","const initialStore: Object = {\r\n  tax: 13,\r\n};\r\n\r\nconst control = (store=initialStore): Object => {\r\n  return store;\r\n}\r\n\r\nexport default control;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport { Provider } from 'react-redux';\r\nimport logger from 'redux-logger'\r\n\r\nimport App from './App.js';\r\nimport control from './reducer';\r\nimport './styles/index.scss';\r\n\r\nconst middlewareEnhancer  = compose(applyMiddleware(logger));\r\nconst roodReducer = combineReducers({\r\n  control,\r\n  form: formReducer,\r\n});\r\nconst store = createStore(roodReducer, middlewareEnhancer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}